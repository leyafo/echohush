name: Release Windows App

on:
  release:
    types: [ published ]
  workflow_dispatch:
    inputs:
      tag:
        description: 'Version tag'
        required: true
        default: '1.0.0'

jobs:
  release:
    name: Release Windows App
    runs-on: windows-latest
    strategy:
      matrix:
        platform:
          - windows/amd64
    steps:
      - name: Checkout source code
        uses: actions/checkout@v3

      - name: 'Get Latest tag'
        id: tag
        uses: "WyriHaximus/github-action-get-previous-tag@v1"
        with:
          fallback: 1.0.0 

      - name: Normalise platform tag
        id: normalise_platform
        shell: bash
        run: |
          tag=$(echo ${{ matrix.platform }} | sed -e 's/\//_/g' -e 's/amd64/x64/g')
          echo "tag=$tag" >> "$GITHUB_OUTPUT"

      - name: Normalise platform name
        id: normalise_platform_name
        shell: bash
        run: |
          pname=$(echo "${{ matrix.platform }}" | sed 's/windows\///g')
          echo "pname=$pname" >> "$GITHUB_OUTPUT"

      - name: Setup Go
        uses: actions/setup-go@v4
        with:
          go-version: stable

      - name: Install chocolatey
        uses: crazy-max/ghaction-chocolatey@v2
        with:
          args: install nsis jq

      - name: Install wails
        shell: bash
        run: go install github.com/wailsapp/wails/v2/cmd/wails@latest

      - name: Setup Node
        uses: actions/setup-node@v3
        with:
          node-version: 18

      - name: Build frontend assets
        shell: bash
        run: |
          npm install -g npm@9
          jq '.info.productVersion = "${{ steps.tag.outputs.tag }}"' wails.json > tmp.json
          mv tmp.json wails.json
          cd frontend
          jq '.version = "${{ steps.tag.outputs.tag }}"' package.json > tmp.json
          mv tmp.json package.json
          npm install

      - name: Build Windows portable app
        shell: bash
        run: |
          CGO_ENABLED=1 wails build -platform ${{ matrix.platform }} -webview2 embed -tags fts5,desktop,production -ldflags "-X echohush/pkg/daemon.RELEASE=${{ steps.tag.outputs.tag }} -X echohush/pkg/daemon.COMMIT=git-6d80d50 -X echohush/pkg/daemon.REPO=git@github.com:leyafo/echohush.git -X echohush/pkg/daemon.BUILDTIME=$(date +%Y-%m-%d_%H:%M:%S) -X echohush/pkg/daemon.SERVICENAME=echohush -X echohush/pkg/daemon.ENV=production -X echohush/pkg/daemon.TAG=${{ steps.tag.outputs.tag }}" 

      - name: Compress portable binary
        working-directory: ./build/bin
        run: Compress-Archive "echohush.exe" "echohush_Portable_${{ steps.tag.outputs.tag }}_${{ steps.normalise_platform.outputs.tag }}.zip"

      - name: Upload release asset (Portable)
        uses: softprops/action-gh-release@v1
        with:
          tag_name: v${{ steps.tag.outputs.tag }}
          files: ./build/bin/echohush_Portable_${{ steps.tag.outputs.tag }}_${{ steps.normalise_platform.outputs.tag }}.zip
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Build Windows NSIS installer
        shell: bash
        run: |
          CGO_ENABLED=1 wails build -clean -platform ${{ matrix.platform }} -tags fts5,desktop,production -nsis -webview2 embed -ldflags "-X echohush/pkg/daemon.RELEASE=${{ steps.tag.outputs.tag }} -X echohush/pkg/daemon.COMMIT=git-6d80d50 -X echohush/pkg/daemon.REPO=git@github.com:leyafo/echohush.git -X echohush/pkg/daemon.BUILDTIME=$(date +%Y-%m-%d_%H:%M:%S) -X echohush/pkg/daemon.SERVICENAME=echohush -X echohush/pkg/daemon.ENV=production -X echohush/pkg/daemon.TAG=${{ steps.tag.outputs.tag }}" 

      - name: Rename installer
        working-directory: ./build/bin
        run: |
          for /f "delims=" %f in ('dir *.exe /b') do (
            move "%f" "echohush_Setup_${{ steps.tag.outputs.tag }}_${{ steps.normalise_platform.outputs.tag }}.exe"
            exit /b
          )
        shell: cmd

      - name: Upload release asset (Installer)
        uses: softprops/action-gh-release@v1
        with:
          tag_name: v${{ steps.tag.outputs.tag }}
          files: ./build/bin/echohush_Setup_${{ steps.tag.outputs.tag }}_${{ steps.normalise_platform.outputs.tag }}.exe
          token: ${{ secrets.GITHUB_TOKEN }}
